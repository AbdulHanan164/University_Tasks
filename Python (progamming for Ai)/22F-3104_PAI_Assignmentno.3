{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aef6318a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Create a regular shape\n",
      "2. Create a circle\n",
      "3. Exit\n",
      "Enter your choice (1, 2, or 3): 1\n",
      "Enter length of the Shape: 4\n",
      "Enter width of the Shape: 5\n",
      "Area of the Shape: 20.0\n",
      "\n",
      "Menu:\n",
      "1. Create a regular shape\n",
      "2. Create a circle\n",
      "3. Exit\n",
      "Enter your choice (1, 2, or 3): 2\n",
      "Enter radius of the Circle: 13.5\n",
      "Circumference of the Circle: 84.78\n",
      "\n",
      "Menu:\n",
      "1. Create a regular shape\n",
      "2. Create a circle\n",
      "3. Exit\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 21\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2. Create a circle\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     20\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m3. Exit\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 21\u001b[0m choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your choice (1, 2, or 3): \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     22\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     23\u001b[0m     length \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter length of the Shape: \u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1175\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1171\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1172\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1174\u001b[0m     )\n\u001b[1;32m-> 1175\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1176\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1177\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1179\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1180\u001b[0m )\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1217\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1216\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1217\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1218\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1219\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "class Shape(object):\n",
    "    def __init__(self, length, width):        \n",
    "        self.length = length\n",
    "        self.width = width\n",
    "    def calculate_area(self):\n",
    "        return self.length * self.width\n",
    "class Circle(Shape):\n",
    "    def __init__(self, radius):\n",
    "        super().__init__(radius, radius)  # Assuming width is the same as length for a circle\n",
    "        self.radius = radius\n",
    "    def calculate_circumference(self):\n",
    "        return 2 * 3.14 * self.radius\n",
    "while True:\n",
    "    print(\"\\nMenu:\")\n",
    "    print(\"1. Create a regular shape\")\n",
    "    print(\"2. Create a circle\")\n",
    "    print(\"3. Exit\")\n",
    "    choice = input(\"Enter your choice (1, 2, or 3): \")\n",
    "    if choice == '1':\n",
    "        length = float(input(\"Enter length of the Shape: \"))\n",
    "        width = float(input(\"Enter width of the Shape: \"))\n",
    "        obj = Shape(length, width)\n",
    "        print(\"Area of the Shape:\", obj.calculate_area())\n",
    "    elif choice == '2':\n",
    "        radius = float(input(\"Enter radius of the Circle: \"))\n",
    "        obj = Circle(radius)\n",
    "        print(\"Circumference of the Circle:\", obj.calculate_circumference())\n",
    "    elif choice == '3':\n",
    "        print(\"Exit (^_^)| Bye!\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"Invalid choice. Please enter 1, 2, or 3.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c0f0aa45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your initial balance: 5000\n",
      "\n",
      "Menu:\n",
      "1. Deposit money\n",
      "2. Withdraw money\n",
      "3. Check current balance\n",
      "4. Exit\n",
      "Enter your choice (1, 2, 3, or 4): 1\n",
      "Enter the deposit amount: 500\n",
      "Deposited PKR:500.0. New balance: PKR:5500.0\n",
      "\n",
      "Menu:\n",
      "1. Deposit money\n",
      "2. Withdraw money\n",
      "3. Check current balance\n",
      "4. Exit\n",
      "Enter your choice (1, 2, 3, or 4): 2\n",
      "Enter the withdrawal amount: 500\n",
      "Withdrew PKR:500.0. New balance: PKR:5000.0\n",
      "\n",
      "Menu:\n",
      "1. Deposit money\n",
      "2. Withdraw money\n",
      "3. Check current balance\n",
      "4. Exit\n",
      "Enter your choice (1, 2, 3, or 4): 1\n",
      "Enter the deposit amount: 400\n",
      "Deposited PKR:400.0. New balance: PKR:5400.0\n",
      "\n",
      "Menu:\n",
      "1. Deposit money\n",
      "2. Withdraw money\n",
      "3. Check current balance\n",
      "4. Exit\n",
      "Enter your choice (1, 2, 3, or 4): 3\n",
      "Current balance: 5400.0\n",
      "\n",
      "Menu:\n",
      "1. Deposit money\n",
      "2. Withdraw money\n",
      "3. Check current balance\n",
      "4. Exit\n",
      "Enter your choice (1, 2, 3, or 4): 4\n",
      "Exit (^_^)|\n"
     ]
    }
   ],
   "source": [
    "class BankAccount(object):\n",
    "    def __init__(self, initial_balance):\n",
    "        self.__balance = initial_balance\n",
    "    def deposit(self, deposit_amount):\n",
    "        if deposit_amount > 0:\n",
    "            self.__balance += deposit_amount\n",
    "            print(f\"Deposited PKR:{deposit_amount}. New balance: PKR:{self.__balance}\")\n",
    "        else:\n",
    "            print(\"Invalid deposit amount. Please enter a positive value.\")\n",
    "    def withdraw(self, withdraw_amount):\n",
    "        if withdraw_amount <= 0:\n",
    "            print(\"Invalid input for Withdraw\")\n",
    "        elif withdraw_amount > self.__balance:\n",
    "            print(\"Insufficient balance for Withdraw\")\n",
    "        else:\n",
    "            self.__balance -= withdraw_amount\n",
    "            print(f\"Withdrew PKR:{withdraw_amount}. New balance: PKR:{self.__balance}\")\n",
    "    def current_balance(self):\n",
    "        return self.__balance\n",
    "balance = float(input(\"Enter your initial balance: \"))\n",
    "bank_account = BankAccount(balance)\n",
    "while True:\n",
    "    print(\"\\nMenu:\")\n",
    "    print(\"1. Deposit money\")\n",
    "    print(\"2. Withdraw money\")\n",
    "    print(\"3. Check current balance\")\n",
    "    print(\"4. Exit\")\n",
    "    choice = input(\"Enter your choice (1, 2, 3, or 4): \")\n",
    "    if choice == '1':\n",
    "        deposit_amount = float(input(\"Enter the deposit amount: \"))\n",
    "        bank_account.deposit(deposit_amount)\n",
    "    elif choice == '2':\n",
    "        withdraw_amount = float(input(\"Enter the withdrawal amount: \"))\n",
    "        bank_account.withdraw(withdraw_amount)\n",
    "    elif choice == '3':\n",
    "        print(\"Current balance:\", bank_account.current_balance())\n",
    "    elif choice == '4':\n",
    "        print(\"Exit (^_^)| Bye!\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"Invalid choice. Please enter 1, 2, 3, or 4.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd559d50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter name of the person: Hanan\n",
      "Enter age of the person (press Enter if not specified): 20\n",
      "Name of the person is Hanan and Age is 20\n"
     ]
    }
   ],
   "source": [
    "class Person(object):\n",
    "    def __init__(self, name, age=None):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "    def display(self):\n",
    "        if self.age is not None:\n",
    "            print(f\"Name of the person is {self.name} and Age is {self.age}\")\n",
    "        else:\n",
    "            print(f\"Name of the person is {self.name} and Age is not given\")\n",
    "Name = input(\"Enter name of the person: \")\n",
    "Age = int(input(\"Enter age of the person (press Enter if not specified): \") or 21)\n",
    "A = Person(Name, Age)\n",
    "A.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fabfb288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Calculate area of a rectangle\n",
      "2. Calculate area of a circle\n",
      "3. Exit\n",
      "Enter your choice (1, 2, or 3): 1\n",
      "Enter length of the rectangle: 4\n",
      "Enter width of the rectangle: 2\n",
      "Area of the rectangle: 8.0\n",
      "\n",
      "Menu:\n",
      "1. Calculate area of a rectangle\n",
      "2. Calculate area of a circle\n",
      "3. Exit\n",
      "Enter your choice (1, 2, or 3): 2\n",
      "Enter radius of the circle: 4.2\n",
      "Area of the circle: 55.3896\n",
      "Circumference of the circle: 26.376\n",
      "\n",
      "Menu:\n",
      "1. Calculate area of a rectangle\n",
      "2. Calculate area of a circle\n",
      "3. Exit\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[29], line 20\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2. Calculate area of a circle\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m3. Exit\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 20\u001b[0m choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your choice (1, 2, or 3): \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     21\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     22\u001b[0m     length \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter length of the rectangle: \u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1175\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1171\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1172\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1174\u001b[0m     )\n\u001b[1;32m-> 1175\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1176\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1177\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1179\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1180\u001b[0m )\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1217\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1216\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1217\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1218\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1219\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "class Shape(object):\n",
    "    def __init__(self, length, width):\n",
    "        self.length = length\n",
    "        self.width = width\n",
    "    def area(self):\n",
    "        return self.length * self.width\n",
    "class Circle(Shape):\n",
    "    def __init__(self, radius):\n",
    "        super().__init__(radius, radius)  # Assuming width is the same as length for a circle\n",
    "        self.radius = radius\n",
    "    def area(self):\n",
    "        return 3.14 * self.radius * self.radius  # Area of a circle\n",
    "    def circumference(self):\n",
    "        return 2 * 3.14 * self.radius\n",
    "while True:\n",
    "    print(\"\\nMenu:\")\n",
    "    print(\"1. Calculate area of a rectangle\")\n",
    "    print(\"2. Calculate area of a circle\")\n",
    "    print(\"3. Exit\")\n",
    "    choice = input(\"Enter your choice (1, 2, or 3): \")\n",
    "    if choice == '1':\n",
    "        length = float(input(\"Enter length of the rectangle: \"))\n",
    "        width = float(input(\"Enter width of the rectangle: \"))\n",
    "        rectangle = Shape(length, width)\n",
    "        print(f\"Area of the rectangle: {rectangle.area()}\")\n",
    "    elif choice == '2':\n",
    "        radius = float(input(\"Enter radius of the circle: \"))\n",
    "        circle = Circle(radius)\n",
    "        print(f\"Area of the circle: {circle.area()}\")\n",
    "        print(f\"Circumference of the circle: {circle.circumference()}\")\n",
    "    elif choice == '3':\n",
    "        print(\"Exit (^_^)| Goodbye!\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"Invalid choice. Please enter 1, 2, or 3.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ff14917f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n",
      "Enter your choice between 1 to 6: 1\n",
      "Starting the Engine:\n",
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n",
      "Enter your choice between 1 to 6: 2\n",
      "Pedaling the bicycle\n",
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n",
      "Enter your choice between 1 to 6: 3\n",
      "Enter the distance to drive (in miles): 4\n",
      "Driving 4.0 miles on electricity.\n",
      "Battery charge remaining: 60.0%\n",
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n",
      "Enter your choice between 1 to 6: 4\n",
      "Enter the amount to recharge the battery (in percentage): 40\n",
      "Battery recharged. Current charge: 100%\n",
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n",
      "Enter your choice between 1 to 6: 5\n",
      "Hybrid car of Fuel-Type electricity and gasoline, Brand is Toyota Prius, and Battery Charge: 100%\n",
      "\n",
      "Menu:\n",
      "1. Start Car Engine\n",
      "2. Pedal Bicycle\n",
      "3. Drive Hybrid Car\n",
      "4. Recharge Hybrid Car Battery\n",
      "5. Display Vehicle Information\n",
      "6. Exit\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[34], line 43\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m5. Display Vehicle Information\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     42\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m6. Exit\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 43\u001b[0m choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your choice between 1 to 6: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     44\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     45\u001b[0m     car \u001b[38;5;241m=\u001b[39m Car(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mToyota\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1175\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1171\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1172\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1174\u001b[0m     )\n\u001b[1;32m-> 1175\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1176\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1177\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1179\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1180\u001b[0m )\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1217\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1216\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1217\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1218\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1219\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "class Vehicle(object):\n",
    "    def __init__(self, brand):\n",
    "        self.brand = brand\n",
    "    def display(self):\n",
    "        print(f\"Brand of this vehicle is {self.brand}:\")\n",
    "class Car(Vehicle):\n",
    "    def start_engine(self):\n",
    "        print(\"Starting the Engine:\")\n",
    "class Bicycle(Vehicle):\n",
    "    def pedal(self):\n",
    "        print(\"Pedaling the bicycle\")\n",
    "class HybridCar(Car, Bicycle):\n",
    "    def __init__(self, brand, fuel_type):\n",
    "        super().__init__(brand)\n",
    "        self.fuel_type = fuel_type\n",
    "        self.battery_charge = 100 \n",
    "    def display(self):\n",
    "        print(f\"Hybrid car of Fuel-Type {self.fuel_type}, Brand is {self.brand}, and Battery Charge: {self.battery_charge}%\")\n",
    "\n",
    "    def recharge_battery(self, amount):\n",
    "        self.battery_charge = min(100, self.battery_charge + amount)\n",
    "        print(f\"Battery recharged. Current charge: {self.battery_charge}%\")\n",
    "\n",
    "    def drive(self, distance):\n",
    "        if self.battery_charge > 0:\n",
    "            print(f\"Driving {distance} miles on electricity.\")\n",
    "            self.battery_charge = max(0, self.battery_charge - 10 * distance)  # Updated to subtract charge\n",
    "            print(f\"Battery charge remaining: {self.battery_charge}%\")\n",
    "        else:\n",
    "            print(\"Battery is empty. Starting the engine.\")\n",
    "            super().start_engine()\n",
    "\n",
    "\n",
    "# Example usage:\n",
    "while True:\n",
    "    print(\"\\nMenu:\")\n",
    "    print(\"1. Start Car Engine\")\n",
    "    print(\"2. Pedal Bicycle\")\n",
    "    print(\"3. Drive Hybrid Car\")\n",
    "    print(\"4. Recharge Hybrid Car Battery\")\n",
    "    print(\"5. Display Vehicle Information\")\n",
    "    print(\"6. Exit\")\n",
    "    choice = input(\"Enter your choice between 1 to 6: \")\n",
    "    if choice == '1':\n",
    "        car = Car(\"Toyota\")\n",
    "        car.start_engine()\n",
    "    elif choice == '2':\n",
    "        bicycle = Bicycle(\"Schwinn\")\n",
    "        bicycle.pedal()\n",
    "    elif choice == '3':\n",
    "        hybrid_car = HybridCar(\"Toyota Prius\", \"electricity and gasoline\")\n",
    "        distance = float(input(\"Enter the distance to drive (in miles): \"))\n",
    "        hybrid_car.drive(distance)\n",
    "    elif choice == '4':\n",
    "        hybrid_car = HybridCar(\"Toyota Prius\", \"electricity and gasoline\")\n",
    "        amount = int(input(\"Enter the amount to recharge the battery (in percentage): \"))\n",
    "        hybrid_car.recharge_battery(amount)\n",
    "    elif choice == '5':\n",
    "        hybrid_car = HybridCar(\"Toyota Prius\", \"electricity and gasoline\")\n",
    "        hybrid_car.display()\n",
    "    elif choice == '6':\n",
    "        print(\"Exiting the program. Goodbye!\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"Invalid choice. Please enter a number from 1 to 6.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "23024e6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter element at index 1: 1\n",
      "Enter element at index 2: 2\n",
      "Enter element at index 3: 3\n",
      "Enter element at index 4: 4\n",
      "Enter element at index 5: 5\n",
      "Enter element at index 6: 6\n",
      "Enter element at index 7: 7\n",
      "Enter element at index 8: 8\n",
      "Enter element at index 9: 9\n",
      "Enter element at index 10: 10\n",
      "Enter element at index 11: 11\n",
      "Enter element at index 12: 12\n",
      "Enter element at index 13: 13\n",
      "Enter element at index 14: 14\n",
      "Enter element at index 15: 15\n",
      "Enter element at index 16: 16\n",
      "Enter element at index 17: 17\n",
      "Enter element at index 18: 18\n",
      "Enter element at index 19: 19\n",
      "Enter element at index 20: 20\n",
      "Original 1D array:\n",
      "['1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13' '14' '15' '16'\n",
      " '17' '18' '19' '20']\n",
      "\n",
      "Reshaped 2D array:\n",
      "[['1' '2' '3' '4' '5']\n",
      " ['6' '7' '8' '9' '10']\n",
      " ['11' '12' '13' '14' '15']\n",
      " ['16' '17' '18' '19' '20']]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr_1d = []\n",
    "for i in range(20):\n",
    "    num = input(f\"Enter element at index {i + 1}: \")\n",
    "    arr_1d.append(num)\n",
    "# Convert the list to a NumPy array\n",
    "arr_1d = np.array(arr_1d)\n",
    "# Reshape the 1D array into a 2D array with 4 rows and 5 columns\n",
    "arr_2d = arr_1d.reshape(4, 5)\n",
    "print(\"Original 1D array:\")\n",
    "print(arr_1d)\n",
    "print(\"\\nReshaped 2D array:\")\n",
    "print(arr_2d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d4661884",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated random array:\n",
      "[23 17 59 61 71 27 39 59 53 59 38 71 96 48  2 77 26 89 49 40]\n",
      "\n",
      "Maximum value in the array: 96\n",
      "Minimum value in the array: 2\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "random_array = np.random.randint(0, 100,20)\n",
    "max_value = np.max(random_array)\n",
    "min_value = np.min(random_array)\n",
    "print(\"Generated random array is:\")\n",
    "print(random_array)\n",
    "print(\"\\nMaximum value in the array is :\", max_value)\n",
    "print(\"Minimum value in the array is :\", min_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "49b68c8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated random array is:\n",
      "[66 57 36  1 83 20 27 68 74 84 67 28 33 38 58 60  4 68 46  9 77 86 78 33\n",
      " 61  4 78 12 31 38]\n",
      "Values greater than 50:\n",
      "[66 57 83 68 74 84 67 58 60 68 77 86 78 61 78]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "#NumPy array of random integers\n",
    "Random_array = np.random.randint(0,100,30)\n",
    "print(\"Generated random array is:\")\n",
    "print(Random_array)\n",
    "#boolean mask for values greater than 50\n",
    "mask = Random_array > 50\n",
    "# Use np.where to check True values\n",
    "indexes = np.where(mask)\n",
    "# Print the values greater than 50\n",
    "print(\"Values greater than 50:\")\n",
    "print(Random_array[indexes])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4a669aba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 7 8]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Broadcasting in NumPy is a powerful feature that allows you to perform operations on arrays of different shapes.\n",
    "When you operate on two arrays of different shapes NumPy automatically broadcasts the smaller array to match the dimensions of the larger array.\n",
    "This means that the smaller array is effectively duplicated along the missing dimensions.\n",
    "Broadcasting is a very efficient way to perform element wise operations on arrays, and it can often save you a lot of time and code compared to using explicit loops.\n",
    "However it is important to understand the rules of broadcasting in order to use it effectively.\n",
    "Rules of Broadcasting\n",
    "There are two main rules of broadcasting in NumPy:\n",
    "Dimensions must be compatible. The two arrays must have the same number of dimensions except for trailing dimensions that are 1 in the smaller array.\n",
    "For example: a 2D array can be broadcast with a 1D array, but a 2D array cannot be broadcast with a 3D array.\n",
    "Shape must be compatible.\n",
    "The shapes of the two arrays must be compatible, which means that the corresponding dimensions must have the same size or one of the sizes must be 1.\n",
    "For example, a (3, 4) array can be broadcast with a (1, 4) array, but a (3, 4) arraycannot be broadcast with a (2, 4) array.\"\"\" \n",
    "#Code Example\n",
    "import numpy as np\n",
    "a = np.array([1, 2, 3])\n",
    "b = 5\n",
    "c = a + b\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f4ea1aa7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original array is : [ 2  4  6  8 10]\n",
      "Squared array is : [  4  16  36  64 100]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "Array = np.array([2, 4, 6, 8, 10])\n",
    "# Square every element in the array\n",
    "Doubled_Array =Array ** 2#store square of array into another array\n",
    "print(\"Original array is :\",Array)\n",
    "print(\"Squared array is :\", Doubled_Array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b5e7f1da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series_reference                          BDCQ.SEA1AA\n",
       "Period                                        2012.06\n",
       "Data_value                                    81780.0\n",
       "Suppressed                                        NaN\n",
       "STATUS                                              F\n",
       "UNITS                                          Number\n",
       "Magnitude                                           0\n",
       "Subject                Business Data Collection - BDC\n",
       "Group                 Industry by employment variable\n",
       "Series_title_1                            Filled jobs\n",
       "Series_title_2      Agriculture, Forestry and Fishing\n",
       "Series_title_3                                 Actual\n",
       "Series_title_4                                    NaN\n",
       "Series_title_5                                    NaN\n",
       "Name: 4, dtype: object"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "Data=pd.read_csv(\"machine.csv\")\n",
    "df=pd.DataFrame(Data)\n",
    "df.iloc[4]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
