{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "4bc67273",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 1\n",
      "Enter a string: Hmza ve programming\n",
      "Content written to the file.\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 2\n",
      "The content of the file is:\n",
      "Hmza ve programming\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 3\n",
      "Number of words in the file: 3\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 4\n",
      "Enter a string to append:  python\n",
      "String appended successfully.\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 2\n",
      "The content of the file is:\n",
      "Hmza ve programming python\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 5\n",
      "File deleted successfully.\n",
      "Menu:\n",
      "1. Write in the Text File\n",
      "2. Read the file\n",
      "3. Count the number of words\n",
      "4. Append a string\n",
      "5. Delete the file and check if it exists\n",
      "6. Exit\n",
      "Enter your choice (1/2/3/4/5/6): 2\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '22F-3104.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[68], line 23\u001b[0m\n\u001b[0;32m     19\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mContent written to the file.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     21\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m     22\u001b[0m     \u001b[38;5;66;03m# Read the file\u001b[39;00m\n\u001b[1;32m---> 23\u001b[0m     file \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m22F-3104.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     24\u001b[0m     string \u001b[38;5;241m=\u001b[39m file\u001b[38;5;241m.\u001b[39mread()\n\u001b[0;32m     25\u001b[0m     file\u001b[38;5;241m.\u001b[39mclose()\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:284\u001b[0m, in \u001b[0;36m_modified_open\u001b[1;34m(file, *args, **kwargs)\u001b[0m\n\u001b[0;32m    277\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[0;32m    278\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    279\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    280\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    281\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    282\u001b[0m     )\n\u001b[1;32m--> 284\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m io_open(file, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '22F-3104.txt'"
     ]
    }
   ],
   "source": [
    "import os\n",
    "while True:\n",
    "    print(\"Menu:\")\n",
    "    print(\"1. Write in the Text File\")\n",
    "    print(\"2. Read the file\")\n",
    "    print(\"3. Count the number of words\")\n",
    "    print(\"4. Append a string\")\n",
    "    print(\"5. Delete the file and check if it exists\")\n",
    "    print(\"6. Exit\")\n",
    "\n",
    "    choice = input(\"Enter your choice (1/2/3/4/5/6): \")\n",
    "\n",
    "    if choice == \"1\":\n",
    "        # Write to the file\n",
    "        string = input(\"Enter a string: \")\n",
    "        file = open(\"22F-3104.txt\", \"w\")\n",
    "        content = file.write(string)\n",
    "        file.close()\n",
    "        print(\"Content written to the file.\")\n",
    "\n",
    "    elif choice == \"2\":\n",
    "        # Read the file\n",
    "        file = open(\"22F-3104.txt\", \"r\")\n",
    "        string = file.read()\n",
    "        file.close()\n",
    "        print(\"The content of the file is:\")\n",
    "        print(string)\n",
    "\n",
    "    elif choice == \"3\":\n",
    "        # Count the number of words\n",
    "        file = open(\"22F-3104.txt\", \"r\")\n",
    "        string = file.read()\n",
    "        file.close()\n",
    "        count = len(string.split())\n",
    "        print(\"Number of words in the file:\", count)\n",
    "\n",
    "    elif choice == \"4\":\n",
    "        # Append a string\n",
    "        string_to_append = input(\"Enter a string to append: \")\n",
    "        file = open(\"22F-3104.txt\", \"a\")\n",
    "        file.write(string_to_append)\n",
    "        file.close()\n",
    "        print(\"String appended successfully.\")\n",
    "\n",
    "    elif choice == \"5\":\n",
    "        # Delete the file and check if it exists\n",
    "        if os.path.exists(\"22F-3104.txt\"):\n",
    "            os.remove(\"22F-3104.txt\")\n",
    "            if not os.path.exists(\"22F-3104.txt\"):\n",
    "                print(\"File deleted successfully.\")\n",
    "            else:\n",
    "                print(\"Failed to delete the file.\")\n",
    "        else:\n",
    "            print(\"File does not exist.\")\n",
    "\n",
    "    elif choice == \"6\":\n",
    "        print(\"Exiting the program.\")\n",
    "        break\n",
    "\n",
    "    else:\n",
    "        print(\"Invalid choice. Please enter a valid option (1/2/3/4/5/6).\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "b5d75f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n",
      "Enter your choice: 1\n",
      "Enter your name: Hamza\n",
      "Enter your balance: 5000\n",
      "Account created with Account Number: 5441\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n",
      "Enter your choice: 5441\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n",
      "Enter your choice: 2\n",
      "Enter account number: 5440\n",
      "Enter transaction amount: 4500\n",
      "Account not found\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n",
      "Enter your choice: 2\n",
      "Enter account number: 5441\n",
      "Enter transaction amount: 450\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n",
      "Enter your choice: 3\n",
      "Enter account number: 5441\n",
      "Account Holder: Hamza\n",
      "Account Number: 5441\n",
      "Balance: 5450.0\n",
      "\n",
      "Transaction History:\n",
      "Deposit: 450.0\n",
      "\n",
      "Banking System Menu:\n",
      "1. Create Account\n",
      "2. Perform Transaction\n",
      "3. View Account Information\n",
      "4. Exit\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[66], line 64\u001b[0m\n\u001b[0;32m     62\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m3. View Account Information\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     63\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m4. Exit\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 64\u001b[0m choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your choice: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     65\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     66\u001b[0m     account_holder \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your name: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1175\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1171\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1172\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1174\u001b[0m     )\n\u001b[1;32m-> 1175\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1176\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1177\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1179\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1180\u001b[0m )\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1217\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1216\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1217\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1218\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1219\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import random\n",
    "class Account:\n",
    "    def __init__(self, name, initial_bal):\n",
    "        self.account_number = random.randint(1001, 9999)  # Ensure a 4-digit account number\n",
    "        self.name = name\n",
    "        self.balance = initial_bal\n",
    "        self.transaction_history = []\n",
    "    def deposit(self, amount):\n",
    "        if amount > 0:\n",
    "            self.balance += amount\n",
    "            self.transaction_history.append(f\"Deposit: {amount}\")\n",
    "        else:\n",
    "            print(\"Invalid deposit amount\")\n",
    "    def withdraw(self, amount):\n",
    "        if amount > 0:\n",
    "            if amount <= self.balance:\n",
    "                self.balance -= amount\n",
    "                self.transaction_history.append(f\"Withdrawal: {amount}\")\n",
    "            else:\n",
    "                print(\"Insufficient balance for withdrawal\")\n",
    "        else:\n",
    "            print(\"Invalid withdrawal amount\")\n",
    "    def get_balance(self):\n",
    "        return self.balance\n",
    "    def account_info(self):\n",
    "        return f\"Account Holder: {self.name}\\nAccount Number: {self.account_number}\\nBalance: {self.balance}\"\n",
    "    def transaction_history_info(self):\n",
    "        return \"\\n\".join(self.transaction_history)\n",
    "    def __str__(self):\n",
    "        return self.account_info()\n",
    "class Bank:\n",
    "    def __init__(self):\n",
    "        self.accounts = {}\n",
    "    def create_account(self, account_holder, initial_balance):\n",
    "        account = Account(account_holder, initial_balance)\n",
    "        self.accounts[account.account_number] = account\n",
    "        return account\n",
    "    def find_account(self, account_number):\n",
    "        return self.accounts.get(account_number)\n",
    "    def __str__(self):\n",
    "        return \"\\n\".join([str(account) for account in self.accounts.values()])\n",
    "class Transaction:\n",
    "    def __init__(self, account_number, transaction_amount):\n",
    "        self.account_number = account_number\n",
    "        self.transaction_amount = transaction_amount\n",
    "    def execute_transaction(self, bank):\n",
    "        account = bank.find_account(self.account_number)\n",
    "        if account:\n",
    "            if self.transaction_amount > 0:\n",
    "                account.deposit(self.transaction_amount)\n",
    "            elif abs(self.transaction_amount) <= account.get_balance():\n",
    "                account.withdraw(abs(self.transaction_amount))\n",
    "            else:\n",
    "                print(\"Insufficient balance for withdrawal\")\n",
    "        else:\n",
    "            print(\"Account not found\")\n",
    "bank = Bank()\n",
    "while True:\n",
    "    print(\"\\nBanking System Menu:\")\n",
    "    print(\"1. Create Account\")\n",
    "    print(\"2. Perform Transaction\")\n",
    "    print(\"3. View Account Information\")\n",
    "    print(\"4. Exit\")\n",
    "    choice = input(\"Enter your choice: \")\n",
    "    if choice == '1':\n",
    "        account_holder = input(\"Enter your name: \")\n",
    "        initial_balance = float(input(\"Enter your balance: \"))\n",
    "        account = bank.create_account(account_holder, initial_balance)\n",
    "        print(\"Account created with Account Number:\" ,account.account_number)\n",
    "    elif choice == '2':\n",
    "        account_number = int(input(\"Enter account number: \"))\n",
    "        transaction_amount = float(input(\"Enter transaction amount: \"))\n",
    "        transaction = Transaction(account_number, transaction_amount)\n",
    "        transaction.execute_transaction(bank)\n",
    "    elif choice == '3':\n",
    "        account_number = int(input(\"Enter account number: \"))\n",
    "        account = bank.find_account(account_number)\n",
    "        if account:\n",
    "            print(account.account_info())\n",
    "            transaction_history = account.transaction_history_info()\n",
    "            if transaction_history:\n",
    "                print(\"\\nTransaction History:\")\n",
    "                print(transaction_history)\n",
    "        else:\n",
    "            print(\"Account not found\")\n",
    "    elif choice == '4':\n",
    "        break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "14ef2e12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter integer 1: 5\n",
      "Enter integer 2: 4\n",
      "Sum is: 9\n",
      "Enter a string: Hanan\n",
      "Enter an integer: 8\n",
      "Enter a float value: 5.9\n",
      "string   Hanan\n",
      "integer   8\n",
      "float_num   5.9\n",
      "Average of list is : 12.5\n",
      "Enter your name: Hanan\n",
      "Enter city name: Jauharabad\n",
      "Name: Hanan  Age: 20 City: Jauharabad\n"
     ]
    }
   ],
   "source": [
    "# i) Positional Arguments\n",
    "def add(a, b):\n",
    "    return a + b\n",
    "# ii) Variable-Length Keyword Arguments\n",
    "def keywords_fun(**keywords):\n",
    "    for key, value in keywords.items():\n",
    "        print(key, \" \", value)\n",
    "# iii) Calculate Average\n",
    "def calculate_average(*args):\n",
    "    total = 0\n",
    "    count = 0\n",
    "    for num in args:\n",
    "        total += num\n",
    "        count += 1\n",
    "    if count == 0:\n",
    "        return 0  # Avoid division by zero\n",
    "    else:\n",
    "        return total / count\n",
    "# iv) Keyword Argument Validation\n",
    "def process_data(data_dict):\n",
    "    name = data_dict.get(\"name\", \"Hanan\")\n",
    "    age = data_dict.get(\"age\", 20)\n",
    "    city = data_dict.get(\"city\", \"jauharabad\")\n",
    "    print(\"Name:\", name, \" Age:\", age, \"City:\", city)\n",
    "# i) Positional Arguments\n",
    "num1 = int(input(\"Enter integer 1: \"))\n",
    "num2 = int(input(\"Enter integer 2: \"))\n",
    "result = add(num1, num2)\n",
    "print(\"Sum is:\", result)\n",
    "# ii) Variable-Length Keyword Arguments\n",
    "string = str(input(\"Enter a string: \"))\n",
    "integer = int(input(\"Enter an integer: \"))\n",
    "float_num = float(input(\"Enter a float value: \"))\n",
    "keywords_fun(string=string, integer=integer, float_num=float_num)\n",
    "# iii) Calculate Average\n",
    "result = calculate_average(5, 10, 15, 20)\n",
    "print(\"Average of list is :\", result)\n",
    "# iv) Keyword Argument Validation\n",
    "name = str(input(\"Enter your name: \"))\n",
    "city = str(input(\"Enter city name: \"))\n",
    "data = {\"name\": name, \"city\": city}\n",
    "process_data(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fa982f1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7b5a58a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Menu:\n",
      "1. Square elements of a list\n",
      "2. Get words starting with vowels\n",
      "3. Reverse a string\n",
      "4. Generate Fibonacci Sequence\n",
      "5. Exit\n",
      "Enter your choice: 1\n",
      "Enter a list of numbers: 1 2 3 4 5\n",
      "Squared numbers: [1, 4, 9, 16, 25]\n",
      "Menu:\n",
      "1. Square elements of a list\n",
      "2. Get words starting with vowels\n",
      "3. Reverse a string\n",
      "4. Generate Fibonacci Sequence\n",
      "5. Exit\n",
      "Enter your choice: 2\n",
      "Enter a list of words: i love programming\n",
      "Words starting with vowels: ['i']\n",
      "Menu:\n",
      "1. Square elements of a list\n",
      "2. Get words starting with vowels\n",
      "3. Reverse a string\n",
      "4. Generate Fibonacci Sequence\n",
      "5. Exit\n",
      "Enter your choice: 3\n",
      "Enter a string to reverse: Hamza baba boi\n",
      "Reversed string: iob abab azmaH\n",
      "Menu:\n",
      "1. Square elements of a list\n",
      "2. Get words starting with vowels\n",
      "3. Reverse a string\n",
      "4. Generate Fibonacci Sequence\n",
      "5. Exit\n",
      "Enter your choice: 4\n",
      "Enter the limit for the Fibonacci sequence: 15\n",
      "Generated Fibonacci Sequence: [0, 1, 1, 2, 3, 5, 8, 13]\n",
      "Menu:\n",
      "1. Square elements of a list\n",
      "2. Get words starting with vowels\n",
      "3. Reverse a string\n",
      "4. Generate Fibonacci Sequence\n",
      "5. Exit\n"
     ]
    }
   ],
   "source": [
    "class Fibonacci:\n",
    "    def __init__(self, limit):\n",
    "        self.limit = limit\n",
    "        self.first = 0\n",
    "        self.second = 1\n",
    "        self.fibonacci_sequence = []\n",
    "    def __iter__(self):\n",
    "        return self\n",
    "    def __next__(self):\n",
    "        if self.first > self.limit:\n",
    "            raise StopIteration\n",
    "        else:\n",
    "            current = self.first\n",
    "            self.first, self.second = self.second, self.first + self.second\n",
    "            self.fibonacci_sequence.append(current)\n",
    "            return current\n",
    "def square_elements(input_list):\n",
    "    return list(map(lambda x: x**2, input_list))\n",
    "def get_vowels(strings):\n",
    "    vowels = list(filter(lambda s: s[0] in 'aeiou', strings))\n",
    "    return vowels\n",
    "def reverse(input_string):\n",
    "    return ''.join(input_string[i] for i in range(len(input_string) - 1, -1, -1))\n",
    "while True:\n",
    "    print(\"Menu:\")\n",
    "    print(\"1. Square elements of a list\")\n",
    "    print(\"2. Get words starting with vowels\")\n",
    "    print(\"3. Reverse a string\")\n",
    "    print(\"4. Generate Fibonacci Sequence\")\n",
    "    print(\"5. Exit\")  \n",
    "    choice = input(\"Enter your choice: \")\n",
    "    if choice == '1':\n",
    "        numbers = list(map(int, input(\"Enter a list of numbers: \").split()))\n",
    "        squared_numbers = square_elements(numbers)\n",
    "        print(\"Squared numbers:\", squared_numbers)    \n",
    "    elif choice == '2':\n",
    "        strings = input(\"Enter a list of words: \").split()\n",
    "        starting_vowels = get_vowels(strings)\n",
    "        print(\"Words starting with vowels:\", starting_vowels)    \n",
    "    elif choice == '3':\n",
    "        string = input(\"Enter a string to reverse: \")\n",
    "        reversed_string = reverse(string)\n",
    "        print(\"Reversed string:\", reversed_string)    \n",
    "    elif choice == '4':\n",
    "        limit_value = int(input(\"Enter the limit for the Fibonacci sequence: \"))\n",
    "        fibonacci_iterator = Fibonacci(limit_value)\n",
    "        for number in fibonacci_iterator:\n",
    "            pass\n",
    "        print(\"Generated Fibonacci Sequence:\", fibonacci_iterator.fibonacci_sequence)   \n",
    "    elif choice == '5':\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e1e48d00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Menu:\n",
      "1. Check URL validity\n",
      "2. Check Email validity\n",
      "3. Check Strong Password\n",
      "4. Extract Phone Numbers from Text\n",
      "5. Exit\n",
      "Enter your choice: 1\n",
      "Enter a URL: www.youtube.come\n",
      "www.youtube.come is a valid URL.\n",
      "Menu:\n",
      "1. Check URL validity\n",
      "2. Check Email validity\n",
      "3. Check Strong Password\n",
      "4. Extract Phone Numbers from Text\n",
      "5. Exit\n",
      "Enter your choice: 2\n",
      "Enter an email address: Hananmanan164@gmail.com\n",
      "Hananmanan164@gmail.com is a valid email.\n",
      "Menu:\n",
      "1. Check URL validity\n",
      "2. Check Email validity\n",
      "3. Check Strong Password\n",
      "4. Extract Phone Numbers from Text\n",
      "5. Exit\n",
      "Enter your choice: 3\n",
      "Enter a password: Hanan@111\n",
      "Strong password.\n",
      "Menu:\n",
      "1. Check URL validity\n",
      "2. Check Email validity\n",
      "3. Check Strong Password\n",
      "4. Extract Phone Numbers from Text\n",
      "5. Exit\n",
      "Enter your choice: 4\n",
      "Enter text to extract phone numbers from: +92 318-6077039\n",
      "923186077\n",
      "039\n",
      "Menu:\n",
      "1. Check URL validity\n",
      "2. Check Email validity\n",
      "3. Check Strong Password\n",
      "4. Extract Phone Numbers from Text\n",
      "5. Exit\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[88], line 39\u001b[0m\n\u001b[0;32m     37\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m4. Extract Phone Numbers from Text\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     38\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m5. Exit\u001b[39m\u001b[38;5;124m\"\u001b[39m)    \n\u001b[1;32m---> 39\u001b[0m choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter your choice: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     40\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m     41\u001b[0m     url \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEnter a URL: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1175\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1171\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1172\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1173\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1174\u001b[0m     )\n\u001b[1;32m-> 1175\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_input_request(\n\u001b[0;32m   1176\u001b[0m     \u001b[38;5;28mstr\u001b[39m(prompt),\n\u001b[0;32m   1177\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_parent_ident[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   1178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_parent(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshell\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1179\u001b[0m     password\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m   1180\u001b[0m )\n",
      "File \u001b[1;32mC:\\New folder\\Lib\\site-packages\\ipykernel\\kernelbase.py:1217\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1216\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1217\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1218\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1219\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def URL_validity(url):\n",
    "    pattern = r\"[a-z]*\\.[A-Za-z\\d]*\\.[a-z]+\"\n",
    "    if bool(re.search(pattern, url)):\n",
    "        print(f\"{url} is a valid URL.\")\n",
    "    else:\n",
    "        print(f\"{url} is not a valid URL.\")\n",
    "def email_validity(email):\n",
    "    pattern = r\"^[a-zA-Z\\d._-]+@[a-zA-Z\\d.-]+\\.[a-zA-Z]{2,}$\"\n",
    "    if bool(re.match(pattern, email)):\n",
    "        print(f\"{email} is a valid email.\")\n",
    "    else:\n",
    "        print(f\"{email} is not a valid email.\")\n",
    "def strong_password_checker(password):\n",
    "    pattern = r\"^(?=.*[a-z]+)(?=.*[A-Z]+)(?=.*[0-9]+).{8,}$\"\n",
    "    if re.match(pattern, password):\n",
    "        print(\"Strong password.\")\n",
    "    else:\n",
    "        print(\"Not a strong password.\")\n",
    "def extract_phone_numbers(text):\n",
    "    phone_pattern = r'\\+?\\d{1,4}[-\\s]?\\d{1,4}[-\\s]?\\d{1,4}'\n",
    "    numbers = re.findall(phone_pattern, text)\n",
    "    numeric_numbers = []\n",
    "    for number in numbers:\n",
    "        numeric_number = re.sub(r'\\D', '', number)\n",
    "        if numeric_number:\n",
    "            numeric_numbers.append(numeric_number) \n",
    "    return numeric_numbers\n",
    "while True:\n",
    "    print(\"Menu:\")\n",
    "    print(\"1. Check URL validity\")\n",
    "    print(\"2. Check Email validity\")\n",
    "    print(\"3. Check Strong Password\")\n",
    "    print(\"4. Extract Phone Numbers from Text\")\n",
    "    print(\"5. Exit\")    \n",
    "    choice = input(\"Enter your choice: \")\n",
    "    if choice == '1':\n",
    "        url = input(\"Enter a URL: \")\n",
    "        URL_validity(url)    \n",
    "    elif choice == '2':\n",
    "        email = input(\"Enter an email address: \")\n",
    "        email_validity(email)    \n",
    "    elif choice == '3':\n",
    "        password = input(\"Enter a password: \")\n",
    "        strong_password_checker(password)    \n",
    "    elif choice == '4':\n",
    "        text = input(\"Enter text to extract phone numbers from: \")\n",
    "        numbers = extract_phone_numbers(text)\n",
    "        for number in numbers:\n",
    "            print(number)    \n",
    "    elif choice == '5':\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e4450ea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1661fd66",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
